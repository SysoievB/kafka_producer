spring.application.name=kafka_tutorial
server.port=8081
spring.kafka.producer.bootstrap-servers=localhost:9092
spring.kafka.consumer.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# The producer requires acknowledgment from all in-sync replicas (ISRs) before considering a message successfully written.
# This ensures high durability but may increase latency.
spring.kafka.producer.acks=all

# The number of times Kafka will retry sending a message if a transient failure occurs.
# This property is commented out because when idempotence is enabled (`enable.idempotence=true`),
# Kafka automatically sets retries to Integer.MAX_VALUE, making manual retries unnecessary.
# spring.kafka.producer.retries=10

# The time (in milliseconds) Kafka waits before retrying a failed send request.
# This property is commented out because it has no effect if retries are disabled.
# If `enable.idempotence=true`, Kafka already manages retries efficiently.
# spring.kafka.producer.properties.retry.backoff.ms=1000

# The total time (in milliseconds) a message can spend being retried before it is considered as failed.
# This includes time spent in retries and network latency.
# If this value is too low, Kafka may fail messages prematurely before exhausting retries.
spring.kafka.producer.properties.delivery.timeout.ms=120000

# The delay (in milliseconds) before sending a batch of messages.
# Setting `linger.ms=0` means messages are sent immediately, reducing latency but potentially lowering throughput.
# If increased, Kafka can batch multiple messages together for better efficiency.
spring.kafka.producer.properties.linger.ms=0

# The maximum time (in milliseconds) Kafka waits for a broker response before failing the request.
# If the broker does not respond within 30 seconds, the request is marked as failed.
# This value should be lower than `delivery.timeout.ms` to avoid premature failures.
spring.kafka.producer.properties.request.timeout.ms=30000

# Enables idempotent message production to prevent duplicate messages in case of retries.
# This ensures each message is delivered exactly once, even if failures occur.
# When enabled, Kafka automatically sets `retries=Integer.MAX_VALUE` and enforces `acks=all`.
spring.kafka.producer.properties.enable.idempotence=true

# The maximum number of unacknowledged requests that can be sent on a single connection before blocking further sends.
# A lower value (e.g., 1) ensures strict ordering but may reduce throughput.
# A higher value (e.g., 5) improves throughput but can lead to out-of-order messages in case of retries.
# When `enable.idempotence=true`, this value must be ? 5 to prevent duplicate or out-of-order messages.
spring.kafka.producer.properties.max.in.flight.requests.per.connection=5

